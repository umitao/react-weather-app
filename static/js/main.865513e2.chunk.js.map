{"version":3,"sources":["components/Header.js","components/InputLocation.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","textAlign","InputLocation","state","city","handleChange","event","preventDefault","setState","target","value","margin","type","placeholder","this","onChange","onClick","props","getWeatherData","React","Component","App","weather","location","url","process","fetch","then","response","json","data","main","temp","toFixed","name","catch","error","console","Fragment","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iOAUeA,EARA,WACb,OACE,yBAAKC,MAAO,CAAEC,UAAW,WACvB,6CC8BSC,E,4MAjCbC,MAAQ,CACNC,KAAM,I,EAGRC,aAAe,SAACC,GACdA,EAAMC,iBACN,EAAKC,SAAS,CACZJ,KAAME,EAAMG,OAAOC,S,uDAIb,IAAD,OACP,OACE,yBAAKV,MAAO,CAAEC,UAAW,SAAUU,OAAQ,SACzC,2BACEC,KAAK,OACLC,YAAY,aACZH,MAAOI,KAAKX,MAAMC,KAClBW,SAAUD,KAAKT,eAEjB,4BACEO,KAAK,SACLI,QAAS,WACP,EAAKC,MAAMC,eAAe,EAAKf,MAAMC,QAHzC,oB,GArBoBe,IAAMC,WCmCnBC,E,4MA/BblB,MAAQ,CACNmB,QAAS,GACTC,SAAU,I,EAGZL,eAAiB,SAACd,GAChB,IAAMoB,EAAG,4DAAwDpB,EAAxD,+BAAmFqB,oCAE5FC,MAAMF,GACHG,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKtB,SAAS,CACZc,QAASQ,EAAKC,KAAKC,KAAKC,QAAQ,GAChCV,SAAUO,EAAKI,UAGlBC,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAMA,O,uDAGlC,OACE,kBAAC,IAAME,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAepB,eAAgBJ,KAAKI,iBACpC,uBAAGlB,MAAO,CAAEC,UAAW,WAAvB,kBACkBa,KAAKX,MAAMoB,SAD7B,OAC2CT,KAAKX,MAAMmB,QADtD,c,GAxBUH,IAAMC,WCQJmB,QACW,cAA7BC,OAAOjB,SAASkB,UAEe,UAA7BD,OAAOjB,SAASkB,UAEhBD,OAAOjB,SAASkB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMiB,a","file":"static/js/main.865513e2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h1>Weather App</h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nclass InputLocation extends React.Component {\n  state = {\n    city: \"\",\n  };\n\n  handleChange = (event) => {\n    event.preventDefault();\n    this.setState({\n      city: event.target.value,\n    });\n  };\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\", margin: \"10px\" }}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter City\"\n          value={this.state.city}\n          onChange={this.handleChange}\n        />\n        <button\n          type=\"button\"\n          onClick={() => {\n            this.props.getWeatherData(this.state.city);\n          }}\n        >\n          Get Weather\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default InputLocation;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport InputLocation from \"./components/InputLocation\";\n\nclass App extends React.Component {\n  state = {\n    weather: \"\",\n    location: \"\",\n  };\n\n  getWeatherData = (city) => {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${process.env.REACT_APP_API_KEY}`;\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({\n          weather: data.main.temp.toFixed(1),\n          location: data.name,\n        });\n      })\n      .catch((error) => console.error(error));\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <InputLocation getWeatherData={this.getWeatherData} />\n        <p style={{ textAlign: \"center\" }}>\n          Temperature in {this.state.location} is {this.state.weather}Â°C\n        </p>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}